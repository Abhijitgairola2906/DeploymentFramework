<!-- 
    Deployment Framework for BizTalk 5.0
    Copyright (C) 2004-2012 Thomas F. Abraham and Scott Colestock
    
    This source file is subject to the Microsoft Public License (Ms-PL).

    This is the core MSBuild file that is used to:

    1) assemble the desired MSI directory structure 
    2) invoke the WiX generation script
    3) invoke WiX itself.

    Project specific WiX files should implement a target called CustomRedist to perform 
    any project specific work necessary to assemble a directory tree that corresponds to what
    the MSI should contain.
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Installer">
  <PropertyGroup>
    <ObjDir>obj\$(Configuration)</ObjDir>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(ObjDir)</IntermediateOutputPath>
    <RedistDir>$(IntermediateOutputPath)\redist</RedistDir>
    <MsiName Condition="'$(MsiName)' == ''">$(ProjectName)-$(ProductVersion)</MsiName>
  </PropertyGroup>

  <Target Name="InitWixDir">
    <CreateProperty Value="$(DeploymentFrameworkDeveloperDir)\WiX" Condition="'$(WixDir)' == ''">
      <Output TaskParameter="Value" PropertyName="WixDir" />
    </CreateProperty>
  </Target>

  <Target Name="InitTargetDir">
    <!-- 
        These CreateProperty calls are required because TargetDir and TargetPath are defined 
        to contain an item list. We want that item list to be expanded so that it can be used
        as a regular property value and not as an item-list-with-transform.
        -->
    <CreateProperty Value="$(TargetDir)">
      <Output TaskParameter="Value" PropertyName="TargetDir" />
    </CreateProperty>
  </Target>

  <!--
    Assemble an image of the redistributable directory structure by pulling files from various locations.
   -->
  <Target Name="Redist" DependsOnTargets="Bootstrap;SetWinVer;InitLog4netFile;GetSoftwarePaths;InitWixDir;InitializeAppName;CustomPreRedist;InitTargetDir">

    <!-- Cleanup redist dir -->
    <RemoveDir Directories="$(RedistDir)" />
    <MakeDir Directories="$(RedistDir)" />

    <!-- Force MSBuild to expand the item spec into physical file specs -->
    <CreateItem Include="$(DeploymentFrameworkDir)\**\*.*" Exclude="$(DeploymentFrameworkDir)\DeployTools\NUnitSubset\**\*.*" Condition="'$(IncludeDeploymentTest)' == 'false'">
      <Output TaskParameter="Include" ItemName="FrameworkSourceGroup" />
    </CreateItem>
    <CreateItem Include="$(DeploymentFrameworkDir)\**\*.*" Condition="'$(IncludeDeploymentTest)' == 'true'">
      <Output TaskParameter="Include" ItemName="FrameworkSourceGroup" />
    </CreateItem>
    <Copy DestinationFolder="$(RedistDir)\Deployment\Framework\%(RecursiveDir)" SourceFiles="@(FrameworkSourceGroup)"/>

    <CreateItem Include="$(DeploymentFrameworkTargetsPath)*.*">
      <Output TaskParameter="Include" ItemName="FrameworkTargetsSourceGroup" />
    </CreateItem>
    <Copy DestinationFolder="$(RedistDir)\Deployment\Framework\%(RecursiveDir)" SourceFiles="@(FrameworkTargetsSourceGroup)"/>

    <!-- Make sure we have directories we need -->
    <MakeDir Directories="$(RedistDir)\DeployResults" />

    <ItemGroupFromCSVFile ColumnNames="$(VdirListFileColumns)" Filename="$(VdirListFile)" Condition="'$(IncludeVirtualDirectories)' == 'true' and '@(VDirList)' == ''">
      <Output TaskParameter="ItemGroup" ItemName="VDirList" />
    </ItemGroupFromCSVFile>

    <!-- Force MSBuild to expand the item spec into physical file specs -->
    <CreateItem Include="@(VDirList->'%(Physdir)\**\*.*')" AdditionalMetadata="Path=%(Physdir)" Condition="'$(IncludeVirtualDirectories)' == 'true'">
      <Output TaskParameter="Include" ItemName="IncludeVirtualDirectoriesSourceGroup" />
    </CreateItem>

    <MakeDir Directories="$(RedistDir)\Vdirs\%(VDirList.Physdir)" Condition="'$(IncludeVirtualDirectories)' == 'true'" />
    <Copy SourceFiles="@(IncludeVirtualDirectoriesSourceGroup)" DestinationFolder="$(RedistDir)\Vdirs\%(Physdir)\%(RecursiveDir)" Condition="'$(IncludeVirtualDirectories)' == 'true'" />

    <!-- Grab miscellaneous files -->
    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="InstallWizard.xml"/>
    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="UninstallWizard.xml"/>

    <!-- Force MSBuild to expand the item spec into physical file specs -->
    <CreateItem Include="$(MSBuildProjectDirectoryParent)\*.chm">
      <Output TaskParameter="Include" ItemName="ChmSourceGroup" />
    </CreateItem>

    <Copy DestinationFolder="$(RedistDir)\%(RecursiveDir)" SourceFiles="@(ChmSourceGroup)"/>

    <ItemGroupFromSeparatedList SeparatedList="$(PortBindings)" FormatString="$(MSBuildProjectDirectory)\{0}" ReverseList="false" Condition="'$(UsingMasterBindings)' == 'false'">
      <Output TaskParameter="ItemGroup" ItemName="RedistPortBindingsGroup" />
    </ItemGroupFromSeparatedList>

    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="@(RedistPortBindingsGroup)" Condition="'$(UsingMasterBindings)' == 'false' and '$(IncludeMessagingBindings)' == 'true'" />

    <ItemGroupFromSeparatedList SeparatedList="$(PortBindingsMaster)" FormatString="$(MSBuildProjectDirectory)\{0}" ReverseList="false" Condition="'$(UsingMasterBindings)' == 'true'">
      <Output TaskParameter="ItemGroup" ItemName="RedistPortBindingsGroup" />
    </ItemGroupFromSeparatedList>

    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="@(RedistPortBindingsGroup)" Condition="'$(UsingMasterBindings)' == 'true' and '$(IncludeMessagingBindings)' == 'true'" />

    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="$(VdirListFile)" Condition="'$(IncludeVirtualDirectories)' == 'true' and '@(VDirList)' == ''" />

    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="$(MSBuildProjectFile)"/>

    <Copy DestinationFolder="$(RedistDir)\Deployment" SourceFiles="$(ProjectName).sln.deploy.include" Condition="Exists('$(ProjectName).sln.deploy.include')" />

    <!-- Grab all our assemblies of various flavors. -->

    <!-- Schemas -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(SchemasQualified)" Condition="'$(IncludeSchemas)' == 'true'"/>
    <Copy SourceFiles="@(Schemas->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(Schemas->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludeSchemas)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- Orchestrations -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(OrchestrationsQualified)" Condition="'$(IncludeOrchestrations)' == 'true'"/>
    <Copy SourceFiles="@(Orchestrations->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(Orchestrations->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludeOrchestrations)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- Transforms -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(TransformsQualified)" Condition="'$(IncludeTransforms)' == 'true'"/>
    <Copy SourceFiles="@(Transforms->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(Transforms->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludeTransforms)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- Pipelines -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(PipelinesQualified)" Condition="'$(IncludePipelines)' == 'true'"/>
    <Copy SourceFiles="@(Pipelines->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(Pipelines->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludePipelines)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- Components -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(ComponentsQualified)" Condition="'$(IncludeComponents)' == 'true'"/>
    <Copy SourceFiles="@(Components->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(Components->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludeComponents)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- PipelineComponents -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(PipelineComponentsQualified)" Condition="'$(IncludePipelineComponents)' == 'true'"/>
    <Copy SourceFiles="@(PipelineComponents->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(PipelineComponents->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludePipelineComponents)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- CustomFunctoids -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(CustomFunctoidsQualified)" Condition="'$(IncludeCustomFunctoids)' == 'true'"/>
    <Copy SourceFiles="@(CustomFunctoids->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(CustomFunctoids->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludeCustomFunctoids)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- DeploymentTest -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(DeploymentTestQualified)" Condition="'$(IncludeDeploymentTest)' == 'true'"/>
    <Copy SourceFiles="@(DeploymentTest->'%(LocationPath)\%(Filename).pdb')" DestinationFiles="@(DeploymentTest->'$(RedistDir)\%(Filename).pdb')" Condition="'$(IncludeDeploymentTest)' == 'true' and Exists('%(LocationPath)\%(Filename).pdb')" ContinueOnError="true" />

    <!-- DeploymentTest config file -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(DeploymentTest->'%(LocationPath)\%(Identity).config')" Condition="'$(IncludeDeploymentTest)' == 'true'" />

    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(Log4netFile)" Condition="'$(Includelog4net)' == 'true'" />

    <!-- External Dependencies -->
    <Copy DestinationFolder="$(RedistDir)\ExternalAssemblies" SourceFiles="@(ExternalAssembliesQualified)" Condition="'@(ExternalAssemblies)' != ''"/>

    <!-- Additional files -->
    <Copy DestinationFolder="$(RedistDir)" SourceFiles="@(AdditionalFilesQualified)" Condition="'@(AdditionalFilesQualified)' != ''" />

    <!-- Rule policies -->
    <Copy DestinationFolder="$(RedistDir)\BRE\Policies" SourceFiles="@(RulePoliciesQualified)" Condition="'@(RulePoliciesQualified)' != '' and Exists('%(FullPath)')" />

    <!-- Rule vocabularies -->
    <Copy DestinationFolder="$(RedistDir)\BRE\Vocabularies" SourceFiles="@(RuleVocabulariesQualified)" Condition="'@(RuleVocabulariesQualified)' != '' and Exists('%(FullPath)')" />

    <!-- ESB itineraries -->
    <Copy DestinationFolder="$(RedistDir)\ESB" SourceFiles="@(EsbItinerariesQualified)" Condition="'@(EsbItinerariesQualified)' != ''" />

    <!--
      Copy the settings spreadsheet file so that it will be included in the MSI.
      In the real world, you may want your operations group to manage it and keep it on a secure file share.
      In that case, set IncludeSettingsSpreadsheetInMsi = false.
    -->
    <Copy
      SourceFiles="$(SettingsSpreadsheetPath)"
      DestinationFiles="$(RedistDir)\Deployment\EnvironmentSettings\SettingsFileGenerator.xml"
      Condition="'$(IncludeSettingsSpreadsheetInMsi)' == 'true' and Exists('$(SettingsSpreadsheetPath)')" />

    <CallTarget Targets="CopyBAM" />
    <CallTarget Targets="CustomRedist"/>

  </Target>

  <Target Name="CopyBAM" DependsOnTargets="ExportBAMXMLFromXLS" Condition="'$(IncludeBAM)' == 'true'">
    <Copy SourceFiles="@(BamDefinitions->'%(LocationPath)\%(Filename).xml')" DestinationFolder="$(RedistDir)\BAM" Condition="'$(IncludeBAM)' == 'true'"/>

    <!-- Tracking profiles -->
    <Copy DestinationFolder="$(RedistDir)\BAM" SourceFiles="@(BamTrackingProfilesQualified)" Condition="'@(BamTrackingProfilesQualified)' != ''" />
  </Target>

  <Target Name="Clean" DependsOnTargets="InitTargetDir">
    <Error Text="Cannot continue. The OutputPath property is undefined. By default, this property is defined in the .btdfproj in PropertyGroups conditional to Debug and Release configurations." Condition="'$(OutputPath)' == ''"></Error>

    <CreateItem Include="$(TargetDir)Install-$(MsiName).bat">
      <Output TaskParameter="Include" ItemName="InstallBatFile" />
    </CreateItem>
    <CreateItem Include="$(TargetDir)$(MsiName).msi">
      <Output TaskParameter="Include" ItemName="InstallMsiFile" />
    </CreateItem>
    <CreateItem Include="start &quot;&quot; msiexec.exe /i $(MsiName).msi INSTALLDIR=&quot;$(DefaultInstallDir)&quot;">
      <Output TaskParameter="Include" ItemName="InstallBatFileLinesWithDefault" />
    </CreateItem>
    <CreateItem Include="start &quot;&quot; msiexec.exe /i $(MsiName).msi">
      <Output TaskParameter="Include" ItemName="InstallBatFileLinesNoDefault" />
    </CreateItem>

    <!-- Delete any existing output files -->
    <Message Text="Cleaning output files..." Importance="normal" />
    <CreateItem Include="@(InstallBatFile);@(InstallMsiFile)">
      <Output TaskParameter="Include" ItemName="OutputsToClean" />
    </CreateItem>

    <Delete Files="@(OutputsToClean)" ContinueOnError="false" Condition="'@(OutputsToClean)' != ''" />
    <Message Text="Finished cleaning output files." Importance="normal" />
  </Target>

  <!--
    Create the installer package
   -->
  <Target Name="Installer" DependsOnTargets="Clean;Redist">
    <Exec Command="&quot;$(Cscript)&quot; /nologo &quot;$(DeploymentFrameworkDeveloperDir)\generate-install-script.js&quot; &quot;$(RedistDir)&quot; &quot;$(IntermediateOutputPath)\Contents.wxi&quot; $(IncludeVocabAndRules) $(IncludeSSO) &quot;$(BizTalkAppName)&quot;" />

    <Message Text="Generating MSI..." Importance="normal" />
    <Exec Command="&quot;$(WixDir)\candle.exe&quot; &quot;-dredist_folder=$(RedistDir)&quot; &quot;-dProductUpgradeCode=$(ProductUpgradeCode)&quot; &quot;-dProductName=$(ProductName)&quot; &quot;-dProductId=$(ProductId)&quot; &quot;-dProductVersion=$(ProductVersion)&quot; &quot;-dProjectVersion=$(ProjectVersion)&quot; &quot;-dManufacturer=$(Manufacturer)&quot; &quot;-dPackageDescription=$(PackageDescription)&quot; &quot;-dPackageComments=$(PackageComments)&quot; &quot;-dDeploymentTest=@(DeploymentTest)&quot; &quot;-dContentsIncludePath=$(MSBuildProjectDirectory)\$(IntermediateOutputPath)\Contents.wxi&quot; &quot;-dProjectFilename=$(MSBuildProjectFile)&quot; -out &quot;$(IntermediateOutputPath)\$(ProjectName).wixobj&quot; &quot;$(DeploymentFrameworkDeveloperDir)\GenericBizTalkMSI.wxs&quot;" />
    <Exec Command="&quot;$(WixDir)\light.exe&quot; &quot;$(IntermediateOutputPath)\$(ProjectName).wixobj&quot; -out &quot;$(TargetDir)\$(MsiName).msi&quot; -ext &quot;$(WixDir)\WixUIExtension.dll&quot; -spdb" />
    <Message Text="Finished generating MSI." Importance="normal" />

    <!-- Write out a .bat file that can be used to launch the installer with msiexec.exe. -->
    <WriteLinesToFile File="@(InstallBatFile)" Lines="@(InstallBatFileLinesWithDefault)" Overwrite="true" Condition="'$(DefaultInstallDir)' != ''" ContinueOnError="true" />
    <WriteLinesToFile File="@(InstallBatFile)" Lines="@(InstallBatFileLinesNoDefault)" Overwrite="true" Condition="'$(DefaultInstallDir)' == ''" ContinueOnError="true" />

    <CallTarget Targets="CustomPostInstaller" />
  </Target>

  <!-- Override in project file if necessary -->
  <Target Name="CustomRedist"/>
  <Target Name="CustomPreRedist"/>
  <Target Name="CustomPostInstaller"/>

</Project>
