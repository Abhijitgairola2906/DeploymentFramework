<?xml version="1.0" encoding="utf-8" ?>
<!-- 
  Deployment Framework for BizTalk 5.0
  Copyright (C) 2004-2012 Thomas F. Abraham and Scott Colestock
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Installer">

  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <Platform Condition="'$(Platform)' == ''">x86</Platform>
    <SchemaVersion>1.0</SchemaVersion>
    <ProjectName>DeploymentFramework.Samples.Advanced</ProjectName>
    <ProjectVersion>1.0</ProjectVersion>

    <!-- Set following properties to true or false to include various pieces of a BizTalk deployment. -->
    <IncludeComponents>true</IncludeComponents>
    <IncludeVirtualDirectories>true</IncludeVirtualDirectories>
    <IncludeDeploymentTest>true</IncludeDeploymentTest>
    <Includelog4net>true</Includelog4net>
    <IncludeSSO>true</IncludeSSO>

    <!-- Set these true if we have a "master" port bindings file where the transporttypedata elements are stored in 
        unescaped XML for convenience/readability sake. -->
    <ApplyXmlEscape>true</ApplyXmlEscape>
    <UsingMasterBindings>true</UsingMasterBindings>

    <!-- This property defaults to false for Visual Studio deployments (true for server deployments). -->
    <!-- For this sample we'll allow undeployment of the vdir even in a Visual Studio deployment. -->
    <UndeployIISArtifacts>true</UndeployIISArtifacts>

    <!-- For vdirs using the BizTalk isapi extension, we set these properties: -->
    <WseExtensionPath>..\VDir_Advanced</WseExtensionPath>
    <WseExtensionName>..\VDir_Advanced</WseExtensionName>
  </PropertyGroup>
  <PropertyGroup>
    <!-- Make your MSI unique - your project should change GUIDs.  -->
    <!-- BizTalk App Version Upgrade -->
    <!--   For each new product release to be deployed to your BizTalk servers: -->
    <!--     1) Increment ProductVersion -->
    <!--     2) Generate a new GUID and update ProductId with the new GUID -->
    <!--   This allows the new MSI to automatically uninstall (not undeploy!) the old MSI and install the new one. -->
    <ProductVersion>1.0.0</ProductVersion>
    <ProductId>727071AB-7396-4b9d-8888-FEFC83FD9802</ProductId>
    <!-- BizTalk App Version Upgrade -->

    <ProductName>Deployment Framework for BizTalk - Advanced</ProductName>
    <Manufacturer>Deployment Framework for BizTalk Team</Manufacturer>
    <PackageDescription>Deployment Framework for BizTalk Sample - Advanced</PackageDescription>
    <PackageComments>Sample demonstrating the Deployment Framework for BizTalk - Advanced</PackageComments>
    <!-- NEVER change the ProductUpgradeCode. -->
    <ProductUpgradeCode>7D9B3AF0-2292-44dd-BDC5-D6258BB08BEA</ProductUpgradeCode>
    <!-- OPTIONAL property DefaultInstallDir can be used to override the default install path. -->
    <!-- %ProgramFiles% is a Windows-defined environment variable that holds the default Program Files path. -->
    <!--<DefaultInstallDir>%ProgramFiles%\BizTalkDeploymentSample</DefaultInstallDir>-->
  </PropertyGroup>
  <!-- Under TFS Team Build, set CustomizableOutDir property to true in TFS 2005/2008/2010 UpgradeTemplate. -->
  <!-- With a workflow build, copy the default template then modify the MSBuild task for the solution build. Set OutDir to blank and -->
  <!-- CommandLineArguments to String.Format("/p:SkipInvalidConfigurations=true;TeamBuildOutDir=""{0}"" {1}", BinariesDirectory, MSBuildArguments). -->
  <PropertyGroup Condition="'$(Configuration)' == 'Debug'">
    <DeploymentFrameworkTargetsPath>$(MSBuildExtensionsPath)\DeploymentFrameworkForBizTalk\5.0\</DeploymentFrameworkTargetsPath>
    <OutputPath Condition="'$(TeamBuildOutDir)' == ''">bin\Debug\</OutputPath>
    <OutputPath Condition="'$(TeamBuildOutDir)' != ''">$(TeamBuildOutDir)</OutputPath>
    <!-- Get our PDBs into the GAC so we get file/line number information in stack traces. -->
    <DeployPDBsToGac>false</DeployPDBsToGac>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Release'">
    <DeploymentFrameworkTargetsPath>$(MSBuildExtensionsPath)\DeploymentFrameworkForBizTalk\5.0\</DeploymentFrameworkTargetsPath>
    <OutputPath Condition="'$(TeamBuildOutDir)' == ''">bin\Release\</OutputPath>
    <OutputPath Condition="'$(TeamBuildOutDir)' != ''">$(TeamBuildOutDir)</OutputPath>
    <!-- Get our PDBs into the GAC so we get file/line number information in stack traces. -->
    <DeployPDBsToGac>false</DeployPDBsToGac>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)' == 'Server'">
    <DeploymentFrameworkTargetsPath>Framework\</DeploymentFrameworkTargetsPath>
    <!-- Get our PDBs into the GAC so we get file/line number information in stack traces. -->
    <DeployPDBsToGac>false</DeployPDBsToGac>
  </PropertyGroup>

  <ItemGroup>
    <!-- We are asking the Deployment Framework to create MSBuild properties from the values
        in our environment settings file that are named here. ssoAppUserGroup and ssoAppAdminGroup
        should be supplied if they need to be different for SSO app creation than the defaults
        specified in BizTalkDeploymentFramework.targets -->
    <PropsFromEnvSettings Include="SsoAppUserGroup;SsoAppAdminGroup" />
  </ItemGroup>

  <ItemGroup Condition="'$(Configuration)' == 'Debug'">
    <!-- We name our host(s) explicitly to avoid having the framework bounce them all. -->
    <BizTalkHosts Include="BizTalkServerApplication" />
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)' == 'Release'">
    <!-- We name our host(s) explicitly to avoid having the framework bounce them all. -->
    <BizTalkHosts Include="BizTalkServerApplication" />
  </ItemGroup>
  <ItemGroup Condition="'$(Configuration)' == 'Server'">
    <!-- We name our host(s) explicitly to avoid having the framework bounce them all. -->
    <BizTalkHosts Include="BizTalkServerApplication" />
  </ItemGroup>

  <ItemGroup>
    <Schemas Include="DeploymentFramework.Samples.Advanced.Schemas.dll">
      <LocationPath>..\Schemas\bin\$(Configuration)</LocationPath>
    </Schemas>
  </ItemGroup>

  <ItemGroup>
    <Transforms Include="DeploymentFramework.Samples.Advanced.Transforms.dll">
      <LocationPath>..\Transforms\bin\$(Configuration)</LocationPath>
    </Transforms>
  </ItemGroup>

  <ItemGroup>
    <Orchestrations Include="DeploymentFramework.Samples.Advanced.Orchestrations.dll">
      <LocationPath>..\Orchestrations\bin\$(Configuration)</LocationPath>
    </Orchestrations>
  </ItemGroup>

  <ItemGroup>
    <Components Include="DeploymentFramework.Samples.Advanced.Components.dll">
      <LocationPath>..\Components\bin\$(Configuration)</LocationPath>
    </Components>
  </ItemGroup>

  <ItemGroup>
    <DeploymentTest Include="DeploymentFramework.Samples.Advanced.DeploymentTest.dll">
      <LocationPath>..\DeploymentTest\bin\$(Configuration)</LocationPath>
    </DeploymentTest>
  </ItemGroup>

  <ItemGroup>
    <FilesToXmlPreprocess Include="AdditionalXmlToPreprocess.xml">
      <LocationPath>..</LocationPath>
      <OutputFilename>AdditionalXmlPreprocessed.xml</OutputFilename>
    </FilesToXmlPreprocess>
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="AdditionalXmlToPreprocess.xml">
      <LocationPath>..</LocationPath>
    </AdditionalFiles>
  </ItemGroup>

  <!-- Optionally define IIS virtual directories and associated AppPool names to be configured by the Framework -->
  <!-- Physical directory is interpreted relative to the directory where the MSBuild project is located - not a full path! -->
  <!--
       IMPORTANT! When testing on a dev machine, you need to set the BTDFAdvancedSample AppPool identity to
       the Isolated host user account. If you don't set this, you'll probably see 500 server errors.
  -->
  <ItemGroup>
    <VDirList Include="*">
      <Vdir>BTDFAdvancedSample</Vdir>
      <Physdir>..\VDir_Advanced</Physdir>
      <AppPool>BTDFAdvancedSample</AppPool>
    </VDirList>
    <!--
    <VDirList Include="*">
      <Vdir>BTDFAdvancedSample2</Vdir>
      <Physdir>..\VDir_Advanced2</Physdir>
      <AppPool>BTDFAdvancedSample</AppPool>
    </VDirList>
    -->
  </ItemGroup>

  <Import Project="$(DeploymentFrameworkTargetsPath)BizTalkDeploymentFramework.targets" />

  <!-- The core scripts allows us to supply CustomDeployTarget and CustomUndeployTarget.
       Use the CustomDeployTarget and CustomUndeployTarget to accomplish any custom work that isn't
       handled by the the core Framework. -->
  <Target Name="CustomDeployTarget">
  </Target>

  <!--
    The Deployment Framework automatically packages most files into the server install MSI.
    However, if there are special folders or files that you need to include in the MSI, you can
    copy them to the folder $(RedistDir) in the CustomRedist target.
  -->
  <Target Name="CustomRedist">
    <MakeDir Directories="$(RedistDir)\TestFiles" />

    <!-- Force MSBuild to expand the item spec into physical file specs -->
    <CreateItem Include="..\TestFiles\**\*.*">
      <Output TaskParameter="Include" ItemName="TestFilesSourceGroup" />
    </CreateItem>

    <Copy DestinationFolder="$(RedistDir)\TestFiles\%(RecursiveDir)" SourceFiles="@(TestFilesSourceGroup)"/>
  </Target>

</Project>
