// Deployment Framework for BizTalk 5.0
// Copyright (C) 2004-2012 Thomas F. Abraham and Scott Colestock
// This source file is subject to the Microsoft Public License (Ms-PL).
// See http://www.opensource.org/licenses/ms-pl.html.
// All other rights reserved.

using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using Genghis;
using clp = Genghis.CommandLineParser;

using Microsoft.BizTalk.SSOClient.Interop;

namespace SSOSettingsFileManager
{
    [clp.ParserUsage("Import a settings file (as generated by SettingsFileGenerator.xls/.xml) into the SSO database.")]
    class SSOSettingsFileImportCommandLine : CommandLineParser
    {
        [clp.ValueUsage("Affiliate application name", Optional = false, MatchPosition = true)]
        public string affiliateAppName = null;

        [clp.ValueUsage("Settings filespec", Optional = true, MatchPosition = false)]
        public string settingsFile = null;

        [clp.FlagUsage("Just list name/values for existing application", Optional = true, MatchPosition = false)]
        public bool list = false;

        [clp.FlagUsage("Delete application", Optional = true, MatchPosition = false)]
        public bool deleteApp = false;

        [clp.ValueUsage("User group name", Optional = true, MatchPosition = false)]
        public string userGroupName = "BizTalk Application Users";

        [clp.ValueUsage("Admin group name", Optional = true, MatchPosition = false)]
        public string adminGroupName = "BizTalk Server Administrators";

        [clp.ValueUsage("Property name to modify", Optional = true, MatchPosition = false)]
        public string propToModify = null;

        [clp.ValueUsage("Property value to modify", Optional = true, MatchPosition = false)]
        public string propValue = null;

    }

    class SettingsFileImport
    {
        /// <summary>
        /// The main entry point for the application.
        /// </summary>
        [STAThread]
        static int Main(string[] args)
        {
            SSOSettingsFileImportCommandLine cl = new SSOSettingsFileImportCommandLine();
            if (!cl.ParseAndContinue(args))
                return -1;

            if (cl.list)
            {
                try
                {
                    object propertyValue;
                    ISSOConfigStore configStore = (ISSOConfigStore)new SSOConfigStore();
                    SSOPropertyBag bag = new SSOPropertyBag();
                    configStore.GetConfigInfo(cl.affiliateAppName, SSOHelper.InfoIdentifier, SSOFlag.SSO_FLAG_RUNTIME, bag);
                    bag.Read(SSOHelper.PropName, out propertyValue, 0);
                    Console.WriteLine(propertyValue);
                }
                catch (System.Exception ex)
                {
                    Console.WriteLine("Unable to list application contents: " + ex.Message);
                    return 1;
                }

                return 0;
            }

            if (cl.propToModify != null && cl.propValue != null)
            {
                try
                {
                    Hashtable ht = SSOSettingsFileManager.SSOSettingsFileReader.Read(cl.affiliateAppName);
                    ht[cl.propToModify] = cl.propValue;
                    SSOSettingsFileManager.SSOSettingsFileReader.Update(cl.affiliateAppName, ht);
                }
                catch (System.Exception ex)
                {
                    Console.WriteLine("Unable to update property name/value: " + ex.Message);
                    return 1;
                }

                return 0;
            }

            if (cl.deleteApp)
            {
                SSOHelper helper = new SSOHelper();
                try
                {
                    helper.DeleteConfigInfo(cl.affiliateAppName);
                    helper.DeleteApp(cl.affiliateAppName);
                    Console.WriteLine("Affiliate application '{0}' deleted.", cl.affiliateAppName);
                }
                catch (System.Exception ex)
                {
                    Console.WriteLine("Unable to delete: " + ex.Message);
                }

                return 0;
            }

            string settingsFileAsString = string.Empty;
            settings inSettings = null;
            try
            {
                // Make sure we can deserialize the file cleanly.
                XmlSerializer serializer = new XmlSerializer(typeof(settings));
                FileStream stream = new FileStream(cl.settingsFile, FileMode.Open, System.IO.FileAccess.Read);
                inSettings = (settings)serializer.Deserialize(stream);
            }
            catch (System.Exception ex)
            {
                Console.WriteLine("Error reading file:");
                Console.WriteLine(ex.ToString());
                return -1;
            }

            try
            {
                SaveSettingsToSSO(cl.affiliateAppName, inSettings, cl.userGroupName, cl.adminGroupName);
            }
            catch (System.Exception ex)
            {
                Console.WriteLine("Error persisting to SSO:");
                Console.WriteLine(ex.ToString());
                return -1;
            }

            return 0;
        }

        private static void SaveSettingsToSSO(
            string affiliateAppName,
            settings inSettings,
            string userGroupName,
            string adminGroupName)
        {
            // Grab the contents as a string.  Rather than reset the stream,
            // we just serialize to avoid any extra artifacts that were in the file.
            StringBuilder sb = new StringBuilder();
            StringWriter writer = new StringWriter(sb);
            XmlSerializer serializer = new XmlSerializer(typeof(settings));
            serializer.Serialize(writer, inSettings);

            SSOHelper helper = new SSOHelper();
            SSOPropertyBag bag = new SSOPropertyBag();
            object o = sb.ToString();
            bag.Write(SSOHelper.PropName, ref o);

            // Create affiliate app if it doesn't exist.
            if (!helper.AppExists(affiliateAppName))
            {
                helper.CreateApp(affiliateAppName, userGroupName, adminGroupName);
                Console.WriteLine("Affiliate application '{0}' was created.", affiliateAppName);
            }
            else
            {
                Console.WriteLine("Affiliate application '{0}' already exists.", affiliateAppName);
            }

            helper.SaveConfigInfo(bag, affiliateAppName);
            Console.WriteLine("Settings file was associated with application '{0}' in SSO.", affiliateAppName);
        }
    }
}
